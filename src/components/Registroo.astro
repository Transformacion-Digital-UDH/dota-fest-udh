---
// Importa las mismas fuentes de video que Welcome.astro
import videoBlueSrcFromComponent from "@assets/videos/file3.mp4"; // Renombrado para evitar conflicto si se usa en la misma página
const videoRedSrcFromComponent =
    "https://videos.pexels.com/video-files/2715412/2715412-uhd_2560_1440_30fps.mp4";
---

<div
    class="h-dvh bg-black text-white flex flex-col items-center justify-center relative overflow-hidden font-aminute"
>
    {/* Videos de fondo */}
    <video
        id="registro-video-red"
        src={videoRedSrcFromComponent}
        class="hidden absolute top-0 left-0 w-full h-full object-cover z-0 opacity-75"
        autoplay
        muted
        loop></video>
    <video
        id="registro-video-blue"
        src={videoBlueSrcFromComponent}
        class="hidden absolute top-0 left-0 w-full h-full object-cover z-0 opacity-75"
        autoplay
        muted
        loop></video>

    {/* Contenido del formulario de registro */}
    <div
        class="relative z-10 flex flex-col items-center text-center p-4 w-full max-w-2xl max-h-[90vh]"
    >
        <h1 class="text-4xl font-bold mb-4 md:mb-8 font-alifira">
            {/* Reducir margen inferior en móviles */}
            Registro de Equipos
        </h1>

        {/* El formulario ahora es un flex container en columna */}
        <form
            id="formRegistroEquipo"
            class="w-full max-w-2xl bg-white/10 p-6 md:p-8 rounded-lg shadow-xl flex flex-col max-h-[calc(80vh-55px)]"
        >
            {/* Contenedor para los campos que tendrán scroll */}
            <div
                class="flex-grow overflow-y-auto pr-2 space-y-6 custom-scrollbar-container"
            >
                {/* pr-2 para espacio del scrollbar si es visible */}
                {/* Nombre del Equipo */}
                <div>
                    {
                        /* Envuelve cada sección principal en un div si no lo está ya */
                    }
                    <label
                        for="nombreEquipo"
                        class="block text-left text-lg mb-2"
                        >Nombre del Equipo:</label
                    >
                    <input
                        type="text"
                        id="nombreEquipo"
                        name="nombreEquipo"
                        class="w-full p-3 ml-1 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                        required
                    />
                </div>

                <h2 class="text-2xl mt-6 mb-2">Integrantes del Equipo</h2>
                {/* Ajustar márgenes */}
                <p class="mb-4 text-sm">
                    {/* Ajustar márgenes */}
                    Escribe el código de estudiante de tus compañeros de equipo.
                    Los datos se cargarán automáticamente.
                </p>

                {/* --- Integrante 1 (Capitán) --- */}
                <div class="p-4 border border-white/20 rounded-md">
                    <label
                        for="codigoIntegrante1"
                        class="block text-left text-lg mb-2"
                        >Código Estudiante (Capitán):</label
                    >
                    <div class="flex items-center gap-2">
                        <input
                            type="text"
                            id="codigoIntegrante1"
                            name="codigoIntegrante1"
                            class="integrante-codigo w-full p-2 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                            required
                            data-integrante-index="1"
                        />

                        <button
                            type="button"
                            class="verificar-codigo-btn verificar-button-dota-style flex-shrink-0"
                            data-integrante-index="1"
                        >
                            Verificar
                        </button>
                    </div>
                    <div
                        id="datosIntegrante1"
                        class="text-left mt-2 text-sm text-gray-300 min-h-[40px]"
                    >
                        {/* Aquí se mostrarán los datos del estudiante */}
                    </div>
                    <input
                        type="hidden"
                        name="nombreIntegrante1"
                        id="nombreIntegrante1"
                    />
                    <input
                        type="hidden"
                        name="programaIntegrante1"
                        id="programaIntegrante1"
                    />
                </div>

                {/* --- Integrante 2 --- */}
                <div class="p-4 border border-white/20 rounded-md">
                    <label
                        for="codigoIntegrante2"
                        class="block text-left text-lg mb-2"
                        >Código Estudiante (Integrante 2):</label
                    >
                    <div class="flex items-center gap-2">
                        <input
                            type="text"
                            id="codigoIntegrante2"
                            name="codigoIntegrante2"
                            class="integrante-codigo w-full p-2 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                            data-integrante-index="2"
                        />
                        <button
                            type="button"
                            class="verificar-codigo-btn verificar-button-dota-style flex-shrink-0"
                            data-integrante-index="2"
                        >
                            Verificar
                        </button>
                    </div>
                    <div
                        id="datosIntegrante2"
                        class="text-left mt-2 text-sm text-gray-300 min-h-[40px]"
                    >
                    </div>
                    <input
                        type="hidden"
                        name="nombreIntegrante2"
                        id="nombreIntegrante2"
                    />
                    <input
                        type="hidden"
                        name="programaIntegrante2"
                        id="programaIntegrante2"
                    />
                </div>

                {/* --- Integrante 3 --- */}
                <div class="p-4 border border-white/20 rounded-md">
                    <label
                        for="codigoIntegrante3"
                        class="block text-left text-lg mb-2"
                        >Código Estudiante (Integrante 3):</label
                    >
                    <div class="flex items-center gap-2">
                        <input
                            type="text"
                            id="codigoIntegrante3"
                            name="codigoIntegrante3"
                            class="integrante-codigo w-full p-2 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                            data-integrante-index="3"
                        />
                        <button
                            type="button"
                            class="verificar-codigo-btn verificar-button-dota-style flex-shrink-0"
                            data-integrante-index="3"
                        >
                            Verificar
                        </button>
                    </div>
                    <div
                        id="datosIntegrante3"
                        class="text-left mt-2 text-sm text-gray-300 min-h-[40px]"
                    >
                    </div>
                    <input
                        type="hidden"
                        name="nombreIntegrante3"
                        id="nombreIntegrante3"
                    />
                    <input
                        type="hidden"
                        name="programaIntegrante3"
                        id="programaIntegrante3"
                    />
                </div>

                {/* --- Integrante 4 --- */}
                <div class="p-4 border border-white/20 rounded-md">
                    <label
                        for="codigoIntegrante4"
                        class="block text-left text-lg mb-2"
                        >Código Estudiante (Integrante 4):</label
                    >
                    <div class="flex items-center gap-2">
                        <input
                            type="text"
                            id="codigoIntegrante4"
                            name="codigoIntegrante4"
                            class="integrante-codigo w-full p-2 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                            data-integrante-index="4"
                        />
                        <button
                            type="button"
                            class="verificar-codigo-btn verificar-button-dota-style flex-shrink-0"
                            data-integrante-index="4"
                        >
                            Verificar
                        </button>
                    </div>
                    <div
                        id="datosIntegrante4"
                        class="text-left mt-2 text-sm text-gray-300 min-h-[40px]"
                    >
                    </div>
                    <input
                        type="hidden"
                        name="nombreIntegrante4"
                        id="nombreIntegrante4"
                    />
                    <input
                        type="hidden"
                        name="programaIntegrante4"
                        id="programaIntegrante4"
                    />
                </div>

                {/* --- Integrante 5 --- */}
                <div class="p-4 border border-white/20 rounded-md">
                    <label
                        for="codigoIntegrante5"
                        class="block text-left text-lg mb-2"
                        >Código Estudiante (Integrante 5):</label
                    >
                    <div class="flex items-center gap-2">
                        <input
                            type="text"
                            id="codigoIntegrante5"
                            name="codigoIntegrante5"
                            class="integrante-codigo w-full p-2 rounded bg-white/20 text-white placeholder-gray-300 focus:ring-2 focus:ring-red-500 outline-none"
                            data-integrante-index="5"
                        />
                        <button
                            type="button"
                            class="verificar-codigo-btn verificar-button-dota-style flex-shrink-0"
                            data-integrante-index="5"
                        >
                            Verificar
                        </button>
                    </div>
                    <div
                        id="datosIntegrante5"
                        class="text-left mt-2 text-sm text-gray-300 min-h-[40px]"
                    >
                    </div>
                    <input
                        type="hidden"
                        name="nombreIntegrante5"
                        id="nombreIntegrante5"
                    />
                    <input
                        type="hidden"
                        name="programaIntegrante5"
                        id="programaIntegrante5"
                    />
                </div>
            </div>

            <div class="mt-auto pt-8">
                <button
                    type="submit"
                    class="w-full bg-red-600 hover:bg-red-800 text-white font-bold py-3 px-6 rounded-lg text-xl transition-colors duration-300"
                >
                    Registrar Equipo
                </button>
            </div>
        </form>
        <div id="mensajeRespuestaRegistro" class="mt-4 text-sm md:text-base">
        </div>
    </div>
</div>

<style>
    .custom-scrollbar-container::-webkit-scrollbar {
        width: 8px; /* Ancho del scrollbar */
    }

    .custom-scrollbar-container::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }

    .custom-scrollbar-container::-webkit-scrollbar-thumb {
        background: rgba(220, 38, 38, 0.7);
        border-radius: 10px;
    }

    .custom-scrollbar-container::-webkit-scrollbar-thumb:hover {
        background: rgba(
            185,
            28,
            28,
            0.9
        ); /* Color del "mango" al pasar el ratón (rojo más opaco) */
    }

    /* Para Firefox (más limitado, solo color y ancho) */
    .custom-scrollbar-container {
        scrollbar-width: thin; /* Puede ser 'auto', 'thin', o 'none' */
        scrollbar-color: rgba(220, 38, 38, 0.7) rgba(255, 255, 255, 0.1); /* color del thumb y color del track */
    }

    .verificar-button-dota-style {
        background: linear-gradient(to bottom, #6b211c, #8e2b19);
        border: 1px solid #bc4539;
        color: white;
        font-size: 12px; /* Ajusta si es necesario, era text-sm antes */
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.2em;
        padding: 12px 24px; /* Ajusta si es necesario, era px-4 py-2 antes */
        cursor: pointer;
        transition:
            filter 0.1s linear,
            border 0.1s linear;
        text-shadow: 0px 0px 6px rgba(0, 0, 0, 1);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.6);
        /* flex-shrink: 0; ya estaba en las clases de Tailwind, se mantiene si es necesario */
    }

    .verificar-button-dota-style:hover {
        filter: brightness(1.2);
    }

    .verificar-button-dota-style:active {
        filter: brightness(1.4);
        border-color: #501f18;
        transform: translateY(1px);
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const video_red_registro = document.querySelector(
            "#registro-video-red",
        ) as HTMLVideoElement;
        const video_blue_registro = document.querySelector(
            "#registro-video-blue",
        ) as HTMLVideoElement;
        const formRegistro = document.getElementById("formRegistroEquipo");
        const mensajeRespuesta = document.getElementById(
            "mensajeRespuestaRegistro",
        );

        // Usar la misma clave que en Welcome.astro
        const LOCAL_STORAGE_KEY_REGISTRO = "activeVideoTheme";
        const VIDEO_RED_ID_REGISTRO = "video-red"; // Asegúrate que estos valores coincidan
        const VIDEO_BLUE_ID_REGISTRO = "video-blue"; // con los guardados desde Welcome.astro

        const getActiveVideoPreference = () => {
            try {
                return localStorage.getItem(LOCAL_STORAGE_KEY_REGISTRO); // <--- CORREGIDO
            } catch (e) {
                console.error("Error reading from localStorage:", e);
                return VIDEO_RED_ID_REGISTRO; // Default a rojo si hay error
            }
        };

        const preferredVideoId =
            getActiveVideoPreference() || VIDEO_RED_ID_REGISTRO;

        if (preferredVideoId === VIDEO_BLUE_ID_REGISTRO) {
            video_blue_registro?.classList.remove("hidden");
            video_red_registro?.classList.add("hidden");
            video_blue_registro
                ?.play()
                .catch((e) =>
                    console.warn("Blue video (registro) play interrupted", e),
                );
            video_red_registro?.pause();
        } else {
            // 'video-red' o cualquier otro valor por defecto
            video_red_registro?.classList.remove("hidden");
            video_blue_registro?.classList.add("hidden");
            video_red_registro
                ?.play()
                .catch((e) =>
                    console.warn("Red video (registro) play interrupted", e),
                );
            video_blue_registro?.pause();
        }

        // Lógica para el formulario de registro de equipo

        const verificarCodigoBtns = document.querySelectorAll(
            ".verificar-codigo-btn",
        );

        async function fetchEstudianteData(
            codigoEstudiante: string,
            integranteIndex: string,
        ) {
            const datosDiv = document.getElementById(
                `datosIntegrante${integranteIndex}`,
            );
            const nombreInput = document.getElementById(
                `nombreIntegrante${integranteIndex}`,
            ) as HTMLInputElement;
            const programaInput = document.getElementById(
                `programaIntegrante${integranteIndex}`,
            ) as HTMLInputElement;

            if (!datosDiv || !nombreInput || !programaInput) return;

            datosDiv.innerHTML =
                '<p class="text-yellow-400">Verificando código...</p>';
            nombreInput.value = ""; // Limpiar campos ocultos
            programaInput.value = "";

            try {
                // Llamada al endpoint proxy de tu backend de Astro
                const response = await fetch("/api/verificar-estudiante", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        codigoEstudiante: codigoEstudiante,
                    }),
                });

                if (!response.ok) {
                    // Intenta leer el mensaje de error del proxy si está disponible
                    let errorData;
                    try {
                        errorData = await response.json();
                    } catch (e) {
                        /* no hacer nada si no es json */
                    }
                    throw new Error(
                        errorData?.message ||
                            `Error de red: ${response.status}`,
                    );
                }

                const result = await response.json(); // { success: boolean, data?: any, message?: string }

                if (result.success && result.data && result.data.length > 0) {
                    const estudiante = result.data[0];
                    const nombreCompleto =
                        `${estudiante.stu_nombres || ""} ${estudiante.stu_apellido_paterno || ""} ${estudiante.stu_apellido_materno || ""}`.trim();

                    datosDiv.innerHTML = `
                        <p><strong>Nombre:</strong> ${nombreCompleto}</p>
                        <p><strong>Programa:</strong> ${estudiante.stu_programa || "No disponible"}</p>
                        <p class="text-green-400">✓ Datos cargados.</p>
                    `;
                    nombreInput.value = nombreCompleto;
                    programaInput.value = estudiante.stu_programa || "";
                } else {
                    datosDiv.innerHTML = `<p class="text-red-400">${result.message || "Código de estudiante no encontrado o sin datos."}</p>`;
                }
            } catch (error: any) {
                console.error("Error fetching student data via proxy:", error);
                datosDiv.innerHTML = `<p class="text-red-400">Error al verificar el código: ${error.message || "Intenta de nuevo."} (Ver consola para detalles)</p>`;
            }
        }

        verificarCodigoBtns.forEach((button) => {
            button.addEventListener("click", (event) => {
                const targetButton = event.target as HTMLButtonElement;
                const integranteIndex = targetButton.dataset.integranteIndex;
                const codigoInput = document.getElementById(
                    `codigoIntegrante${integranteIndex}`,
                ) as HTMLInputElement;
                if (codigoInput && integranteIndex) {
                    const codigo = codigoInput.value.trim();
                    if (codigo) {
                        fetchEstudianteData(codigo, integranteIndex);
                    } else {
                        const datosDiv = document.getElementById(
                            `datosIntegrante${integranteIndex}`,
                        );
                        if (datosDiv)
                            datosDiv.innerHTML =
                                '<p class="text-yellow-400">Por favor, ingresa un código.</p>';
                    }
                }
            });
        });

        // Event listener para los inputs de código (opcional, para verificar al perder el foco)
        document.querySelectorAll(".integrante-codigo").forEach((input) => {
            input.addEventListener("blur", (event) => {
                const targetInput = event.target as HTMLInputElement;
                const integranteIndex = targetInput.dataset.integranteIndex;
                const codigo = targetInput.value.trim();
                if (codigo && integranteIndex) {
                    // Podrías llamar a fetchEstudianteData aquí también si prefieres
                    // fetchEstudianteData(codigo, integranteIndex);
                    // O simplemente dejar que el usuario use el botón "Verificar"
                }
            });
        });

        // Lógica para el envío del formulario de registro de equipo (similar a la anterior de usuario)
        formRegistro?.addEventListener("submit", async (event) => {
            event.preventDefault();
            if (mensajeRespuesta) {
                mensajeRespuesta.textContent = "Registrando equipo...";
                mensajeRespuesta.className = "mt-4 text-yellow-400";
            }

            const formData = new FormData(formRegistro as HTMLFormElement);
            const data = Object.fromEntries(formData.entries());

            // console.log("Datos del equipo a registrar:", data); // Para depuración

            try {
                const response = await fetch("/api/registrar-equipo", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    if (mensajeRespuesta) {
                        mensajeRespuesta.textContent =
                            result.message ||
                            "¡Equipo registrado exitosamente!";
                        mensajeRespuesta.className = "mt-4 text-green-400";
                    }
                    (formRegistro as HTMLFormElement).reset();
                    // Limpiar los divs de datos de integrantes
                    document
                        .querySelectorAll('[id^="datosIntegrante"]')
                        .forEach((div) => {
                            if (div instanceof HTMLElement) div.innerHTML = "";
                        });
                } else {
                    if (mensajeRespuesta) {
                        mensajeRespuesta.textContent =
                            result.message ||
                            "Error en el registro del equipo.";
                        mensajeRespuesta.className = "mt-4 text-red-400";
                    }
                }
            } catch (error) {
                console.error(
                    "Error al enviar el formulario de registro de equipo:",
                    error,
                );
                if (mensajeRespuesta) {
                    mensajeRespuesta.textContent =
                        "Ocurrió un error al conectar con el servidor para registrar el equipo.";
                    mensajeRespuesta.className = "mt-4 text-red-400";
                }
            }
        });
    });
</script>
